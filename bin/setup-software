#!/bin/bash
set -o noglob
shopt -qs extglob

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"
definitionDirspec="${scriptDir}/../etc"

SUDO='sudo --set-home'; [ $EUID -eq 0 ] && SUDO=''  # Use root's home; especially pip3 writes to ~/.cache/pip and complains if the files belong to another user.

printUsage()
{
    cat <<HELPTEXT
Guided wizard to install various common software that I use.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose] -a|--all|DEFINITION-NAME|FILESPEC [...] [-?|-h|--help]'
}

typeset -a acceptedDefinitions=()
addAllAcceptedDefinitions()
{
    local definition; while IFS=$'\n' read -r definition
    do
	definition="${definition#./}"
	offerTo "Consider ${definition}?" && acceptedDefinitions+=("$definition")
    done < <(cd "$definitionDirspec" && find . -type f -print | sort)
}

database()
{
    picoDB --base-type data --namespace setup-software --table "$@"
}

isVerbose=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--verbose|-v)	shift; isVerbose=t;;
	--all|-a)	shift
			addAllAcceptedDefinitions
			if [ ${#acceptedDefinitions[@]} -eq 0 ]; then
			    exit 1
			else
			    set -- "${acceptedDefinitions[@]}" "$@"
			fi
			;;
	--database)	shift; database "$@"; exit $?;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

IFS=' '

typeset -A installedPackages=()
isInstalledPackagesAvailable=
getInstalledPackages()
{
    [ "$isInstalledPackagesAvailable" ] && return

    local package; while IFS=$'\n' read -r package
    do
	installedPackages["$package"]=t
	case ",${DEBUG:-}," in *,setup-software:pkg,*) echo >&2 "${PS4}setup-software (pkg): Found installed ${package}";; esac
    done < <(dpkg-package-list)

    if [ ${#installedPackages[@]} -eq 0 ]; then
	echo >&2 'ERROR: Failed to obtain installed package list.'
	exit 3
    fi

    isInstalledPackagesAvailable=t
}

typeset -A installedPpaRepositories=()
isInstalledPpaRepositoriesAvailable=
getInstalledPpaRepositories()
{
    [ "$isInstalledPpaRepositoriesAvailable" ] && return

    local repo; while IFS=$'\n' read -r repo
    do
	installedPpaRepositories["${repo#ppa:}"]=t
	case ",${DEBUG:-}," in *,setup-software:ppa,*) echo >&2 "${PS4}setup-software (ppa): Found installed ppa:${repo}";; esac
    done < <(apt-list-repositories --ppa-only)

    isInstalledPpaRepositoriesAvailable=t
}

typeset -A installedDebBuildDependencies=()
isInstalledDebBuildDependenciesAvailable=
getInstalledDebBuildDependencies()
{
    [ "$isInstalledDebBuildDependenciesAvailable" ] && return

    eval "$(database debBuildDependencies --get-as-dictionary installedDebBuildDependencies)" || exit 3

    [ ${#installedDebBuildDependencies[@]} -gt 0 ] &&
	case ",${DEBUG:-}," in *,setup-software:deb-build,*) echo >&2 "${PS4}setup-software (deb-build): Found installed ${!installedDebBuildDependencies[@]}";; esac

    isInstalledDebBuildDependenciesAvailable=t
}

typeset -A installedPip3Packages=()
isInstalledPip3PackagesAvailable=
getInstalledPip3Packages()
{
    [ "$isInstalledPip3PackagesAvailable" ] && return

    local packageName remainder; while IFS=' ' read -r packageName remainder
    do
	case "$packageName" in
	    Package|+(-))   continue;;	# Skip 2-line header
	    *)		    installedPip3Packages["$packageName"]=t
			    case ",${DEBUG:-}," in *,setup-software:pip3,*) echo >&2 "${PS4}setup-software (pip3): Found installed ${packageName}";; esac
			    ;;
	esac
    done < <(pip3 list 2>/dev/null)

    isInstalledPip3PackagesAvailable=t
}

typeset -A installedNpmPackages=()
isInstalledNpmPackagesAvailable=
getInstalledNpmPackages()
{
    [ "$isInstalledNpmPackagesAvailable" ] && return

    local packageDirspec; while IFS=$'\n' read -r packageDirspec
    do
	local packageName; packageName="${packageDirspec##*/}"
	if [ -n "$packageName" ]; then
	    installedNpmPackages["$packageName"]=t
	    case ",${DEBUG:-}," in *,setup-software:npm,*) echo >&2 "${PS4}setup-software (npm): Found installed ${packageName}";; esac
	fi
    done < <(npm --global --parseable --depth 0 2>/dev/null)

    isInstalledNpmPackagesAvailable=t
}


hasItem()
{
    local item="${1:?}"; shift
    local name="${item#*:}"
    local prefix="${item%$name}"

    case "$prefix" in
	# If a package retrieval fails, treat this as an existing item, so that
	# these are effectively skipped.
	'')		! getInstalledPackages			|| [ "${installedPackages["$name"]}" ];;
	ppa:)		! getInstalledPpaRepositories		|| [ "${installedPpaRepositories["$name"]}" ];;
	build-dep:)	! getInstalledDebBuildDependencies	|| [ "${installedDebBuildDependencies["$name"]}" ];;
	pip3:)		! getInstalledPip3Packages		|| [ "${installedPip3Packages["$name"]}" ];;
	npm:)		! getInstalledNpmPackages		|| [ "${installedNpmPackages["$name"]}" ];;
	*)		printf >&2 'ERROR: Invalid type: %s\n' "$prefix"; exit 3;;
    esac
}

typeset -a addedPackages=()
typeset -a addedPpaRepositories=()
typeset -a addedDebBuildDependencies=()
typeset -a addedPip3Packages=()
typeset -a addedNpmPackages=()
isAvailable()
{
    local packageManager="${1:?}"; shift
    if [ "${installedPackages["$packageManager"]}" ] || [ "${addedPackages["$packageManager"]}" ] || exists "$packageManager"; then
	return
    fi

    if offerTo "$packageManager is not yet installed; install it?"; then
	addedPackages+=("$packageManager")
    else
	return 1
    fi
}
addItems()
{
    local item; for item
    do
	local name="${item#*:}"
	local prefix="${item%$name}"
	case "$prefix" in
	    '')		    addedPackages+=("$name");;
	    ppa:)	    addedPpaRepositories+=("$name");;
	    build-dep:)	    addedDebBuildDependencies+=("$name");;
	    pip3:)	    isAvailable pip3 && addedPip3Packages+=("$name");;
	    npm:)	    isAvailable npm  && addedNpmPackages+=("$name");;
	    *)		    printf >&2 'ERROR: Invalid type: %s\n' "$prefix"; exit 3;;
	esac
    done
}


pkgInstall()
{
    [ ${#addedPackages[@]} -gt 0 ] || return
    local IFS=' '
    toBeInstalledCommands+=("${SUDO}${SUDO:+ }apt install ${addedPackages[*]}")
}

ppaInstall()
{
    [ ${#addedPpaRepositories[@]} -gt 0 ] || return
    local repo; for repo in "${addedPpaRepositories[@]}"
    do
	toBeInstalledCommands+=("${SUDO}${SUDO:+ }add-apt-repository ppa:$repo")
    done
    toBeInstalledCommands+=("${SUDO}${SUDO:+ }apt update")
}

debBuildDependencyInstall()
{
    [ ${#addedDebBuildDependencies[@]} -gt 0 ] || return

    local databaseUpdate; printf -v databaseUpdate %q "${scriptDir}/${scriptName}"
    local buildDep; for buildDep in "${addedDebBuildDependencies[@]}"
    do
	toBeInstalledCommands+=("${SUDO}${SUDO:+ }apt-get build-dep $buildDep && $databaseUpdate --database debBuildDependencies --add $buildDep")
    done
}

pip3Install()
{
    [ ${#addedPip3Packages[@]} -gt 0 ] || return
    local IFS=' '
    toBeInstalledCommands+=("${SUDO}${SUDO:+ }pip3 install ${addedPip3Packages[*]}")
}

npmInstall()
{
    [ ${#addedNpmPackages[@]} -gt 0 ] || return
    local IFS=' '
    toBeInstalledCommands+=("${SUDO}${SUDO:+ }npm install --global ${addedNpmPackages[*]}")
}



typeset -a definitions=()
for definitionFile
do
    if [ -f "${definitionDirspec}/${definitionFile}" -a "${definitionFile:0:1}" != '.' ]; then
	definitionFilespec="${definitionDirspec}/${definitionFile}"
    elif [ -f "${definitionFile}" ]; then
	definitionFilespec="$definitionFile"
    else
	printf >&2 'ERROR: Definition "%s" does not exist.\n' "$definitionFile"
	exit 2
    fi

    readarray -O ${#definitions[@]} -t definitions < "$definitionFilespec"
done
[ ${#definitions[@]} -eq 0 ] && exit 1



for definition in "${definitions[@]}"
do
    [[ "$definition" =~ ^[[:space:]]*# ]] && continue
    set -- ${definition%%[	 ]#*}

    typeset -a missingItems=()
    for item
    do
	hasItem "$item" || missingItems+=("$item")
    done

    if [ ${#missingItems[@]} -eq 0 ]; then
	[ "$isVerbose" ] && printf >&2 'Already installed: %s\n' "$definition"
    else
	what=
	if [ $# -gt ${#missingItems[@]} ]; then
	    what="missing: ${missingItems[*]}"
	elif [ $# -gt 1 ]; then
	    what='all are missing'
	fi

	if offerTo "Install ${definition}${what:+ (}${what}${what:+)}?"; then
	    addItems "${missingItems[@]}"
	fi
    fi
done



ppaInstall
pkgInstall
debBuildDependencyInstall
pip3Install
npmInstall

[ ${#toBeInstalledCommands[@]} -gt 0 ] && \
    printf '%s\n' "${toBeInstalledCommands[@]}"
