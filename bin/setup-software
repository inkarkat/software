#!/bin/bash
shopt -qs extglob

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
readonly projectDir="${scriptDir}/.."
baseDir="${projectDir}/etc"
typeDir="${projectDir}/lib/types"
readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

SUDO='sudo --set-home'; [ $EUID -eq 0 ] && SUDO=''  # Use root's home; especially pip3 writes to ~/.cache/pip and complains if the files belong to another user.

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose] [-y|--yes] [-s|--select DEFINITION [-s ...]] [--base-dir BASE-DIR] -a|--all|GROUP-NAME|GROUP-FILESPEC [...] [-?|-h|--help]|[-H|--config-help [TYPE]]'
    echo
    printf 'Usage: packageInstallCommandLine="$(%q %s)" && eval "$packageInstallCommandLine"\n' "$(basename "$1")" '--yes [--select DEFINITION] (--base-dir BASE-DIR -a|--all|GROUP-NAME | GROUP-FILESPEC)'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Guided wizard to interactively choose / take (with -y|--yes) (from DEFINITION(s)
/ all / the passed GROUP(s)) and install various common software that I use.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --config-help|-H [TYPE]
			Show details about the configuration syntax for all /
			for TYPE.
    --verbose|-v	Also mention already installed definitions that are
			skipped.
    --yes|-y		Accept all definitions (that are not yet installed and
			have been chosen) without the usual interactive query.
    --select|-s	DEFINITION
			Choose DEFINITION, which must exactly match the COMMENT
			in a definition if one exists or the exact list of ITEMs
			(with definitions broken over multiple lines already
			joined), instead of considering all from the passed
			GROUP(s).
    --base-dir BASE-DIR	Reference definitions, custom actions, pre-, and
			post-install actions from BASE-DIR instead of using
			those bundled with this project.
    --all|-a		Consider definitions from all existing definition
			groups.
    GROUP-NAME		Consider definitions from GROUP-NAME, as stored inside
			this project / BASE-DIR.
    GROUP-FILESPEC	Consider definitions from GROUP-FILESPEC, which can
			point to anywhere in the file system.
HELPTEXT
}


printConfigUsageForTypes()
{
    local padding=
    local prefix; for prefix
    do
	local typeFunction="${typeRegistry["${prefix:-native}:"]}"
	if [ -n "$typeFunction" ]; then
	    printf "$padding"; padding=$'\n'
	    eval "configUsage${typeFunction}"
	else
	    printf >&2 'ERROR: Invalid type: %s\n' "$prefix"
	    exit 3
	fi
    done
}
printConfigUsage()
{
    if [ $# -eq 0 ]; then
	cat <<'HELPTEXT'
A definition consists of one or many whitespace-separated ITEMs, optionally
followed by a # DESCRIPTION. It can be broken over multiple lines, with a
trailing \ as the line continuation character.
Definitions are grouped into DEFINITION-GROUPs which contain definitions that
belong to a certain category or are typically installed together for a certain
use case.
HELPTEXT
	echo
	typeset -a typeOrdering=("${!typeInstallOrder[@]}")
	readarray -t typeOrdering < <(printf '%s\n' "${typeOrdering[@]}" | sort -n)

	typeset -A mirroredTypeRegistry=()
	for prefix in "${!typeRegistry[@]}"
	do
	    mirroredTypeRegistry["${typeRegistry["$prefix"]}"]="$prefix"
	done

	typeset -a prefixes=()
	local order; for order in "${typeOrdering[@]}"
	do
	    prefixes+=("${mirroredTypeRegistry["${typeInstallOrder["$order"]}"]}")
	done

	printConfigUsageForTypes "${prefixes[@]%:}"    # Show config help for all types (in the order in which the types are also installed).

	echo
	configUsagePreinstall
	echo
	configUsagePostinstall
    else
	printConfigUsageForTypes "$@"
    fi
}

typeset -A typeRegistry=([native:]=Native)
typeset -A typeInstallOrder=([10]=Native)
for typeLib in "${typeDir}"/*.sh
do
    source "$typeLib" || exit $?
done
set -o noglob

typeset -a acceptedGroups=()
addAllAcceptedGroups()
{
    local group; while IFS=$'\n' read -r group
    do
	group="${group#./}"
	memoizeDecision --memoize-group setup-software-groups --subject "$group" --verb 'is not' --state 'chosen' --action 'consider it' && \
	    acceptedGroups+=("$group")
    done < <(cd "$definitionDirspec" && find . -type f -print | sort)
}

database()
{
    picoDB --base-type data --namespace setup-software --table "$@"
}

typeset -A installedNativePackages=()
isInstalledNativePackagesAvailable=
getInstalledNativePackages()
{
    [ "$isInstalledNativePackagesAvailable" ] && return

    local package; while IFS=$'\n' read -r package
    do
	installedNativePackages["$package"]=t
	case ",${DEBUG:-}," in *,setup-software:pkg,*) echo >&2 "${PS4}setup-software (pkg): Found installed ${package}";; esac
    done < <(dpkg-package-list)

    if [ ${#installedNativePackages[@]} -eq 0 ]; then
	echo >&2 'ERROR: Failed to obtain installed package list.'
	exit 3
    fi

    isInstalledNativePackagesAvailable=t
}
hasNative()
{
    # If a package retrieval fails, treat this as an existing item, so that
    # these are effectively skipped.
    ! getInstalledNativePackages || [ "${installedNativePackages["${1:?}"]}" ]
}
addNative()
{
    addedNativePackages+=("${1:?}")
}

configUsageNative()
{
    cat <<'HELPTEXT'
Items without a prefix refer to packages installed via the distribution's
package manager (apt).
HELPTEXT
}
configUsagePreinstall()
{
    cat <<'HELPTEXT'
preinstall: items consist of an ACTION that is one of the following:
- an executable command in the ./etc/preinstall directory tree that is invoked
  (prepend $SUDO if it needs to be invoked as root) and should then perform the
  preinstallation steps
- a text file in the ./etc/preinstall directory tree whose file name (without
  extension) is taken as a notification title and contents as notification to be
  displayed (presumably with instructions for manual pre-installation steps)
  immediately and on each login until the user acknowledges it
- another ITEM (that is then executed as usual); for packages installed via the
  distribution's package manager, use the special "native:" prefix here
- a PREINSTALL-EXPRESSION (whitespace must be escaped or the entire expression
  quoted!) that is eval'd (prepend $SUDO if it needs to be invoked as root)
A preinstall item runs (before other installation actions) if the
non-pre/postinstall item preceding it in the current definition is missing, but
the definition has now been selected.
HELPTEXT
}
configUsagePostinstall()
{
    cat <<'HELPTEXT'
postinstall: items consist of an ACTION that is one of the following:
- an executable command in the ./etc/postinstall directory tree that is invoked
  (prepend $SUDO if it needs to be invoked as root) and should then perform the
  postinstallation steps
- a text file in the ./etc/postinstall directory tree whose file name (without
  extension) is taken as a notification title and contents as notification to be
  displayed (presumably with instructions for manual post-installation steps)
  immediately and on each login until the user acknowledges it
- another ITEM (that is then executed as usual); for packages installed via the
  distribution's package manager, use the special "native:" prefix here
- a POSTINSTALL-EXPRESSION (whitespace must be escaped or the entire expression
  quoted!) that is eval'd (prepend $SUDO if it needs to be invoked as root)
A postinstall item runs if the non-pre/postinstall item preceding it in the
current definition was missing, but has been successfully installed by the
installation commands.
HELPTEXT
}

addPreinstall()
{
    local name="${1:?}"; shift
    if [ "${addedItems["${name#*$'\n'}"]}" ]; then
	# Convert the "preinstall:ACTION\nITEM" to --pre "$ITEM" --action
	# "$ACTION" and do a recursive invocation now, in order to print the
	# preinstallation commands before anything else. This cannot be done
	# within this script's scope, as preinstall items that reference another
	# ITEM will populate all the addedITEM* arrays, and everything will be
	# intermingled and later printed type by type in the static order, but
	# the purpose of preinstall is to execute stuff before anything else.
	"${scriptDir}/${scriptName}" "${recursiveArgs[@]}" --pre "${name#*$'\n'}" --action "${name%%$'\n'*}"
    fi
}
addPostinstall()
{
    local name="${1:?}"; shift
    # Convert the "postinstall:ACTION\nITEM" to
    # --post "$ITEM" --action "$ACTION".
    addedPostinstallArgs+=(--post "${name#*$'\n'}" --action "${name%%$'\n'*}")
}

hasItem()
{
    local item="${1:?}"; shift
    local name="${item#*:}"
    local prefix="${item%"$name"}"

    local typeFunction="${typeRegistry["${prefix:-native:}"]}"
    if [ -n "$typeFunction" ]; then
	eval "has${typeFunction} \"\$name\""
    else
	printf >&2 'ERROR: Invalid type: %s\n' "$prefix"
	exit 3
    fi
}

askTo()
{
    memoizeDecision --memoize-group setup-software "$@"
}

typeset -a addedNativePackages=()
typeset -a addedPostinstallArgs=()
isAvailable()
{
    local packageManager="${1:?}"; shift
    local packageManagerName="${1:-$packageManager}"; shift

    if [ "${installedNativePackages["$packageManager"]}" ] || [ "${addedNativePackages["$packageManager"]}" ] || exists "$packageManager"; then
	return
    fi

    if askTo --subject "$packageManagerName" --verb 'is not yet' --state installed --action 'install it'; then
	# Allow special pre- and post-install steps for implicitly added package manager packages.
	local actionScript
	for actionScript in "${preinstallActionsDirspec}/${packageManagerName}"/*
	do
	    [ -x "$actionScript" ] && "${scriptDir}/${scriptName}" "${recursiveArgs[@]}" --pre "$packageManagerName" --action "${actionScript#"${preinstallActionsDirspec}/${packageManagerName}/"}"
	done

	addedNativePackages+=("$packageManagerName")

	for actionScript in "${postinstallActionsDirspec}/${packageManagerName}"/*
	do
	    [ -x "$actionScript" ] && addedPostinstallArgs+=(--post "$packageManagerName" --action "${actionScript#"${postinstallActionsDirspec}/${packageManagerName}/"}")
	done
    else
	return 1
    fi
}
typeset -A addedItems=()
addItems()
{
    local item; for item
    do
	local name="${item#*:}"
	local prefix="${item%"$name"}"
	local typeFunction="${typeRegistry["${prefix:-native:}"]}"
	if [ -n "$typeFunction" ]; then
	    eval "add${typeFunction} \"\$name\""
	else
	    printf >&2 'ERROR: Invalid type: %s\n' "$prefix"
	    exit 3
	fi
	addedItems["$item"]=t	# Record all added items for the preinstall check.
    done
}


installNative()
{
    [ ${#addedNativePackages[@]} -gt 0 ] || return
    local IFS=' '
    toBeInstalledCommands+=("${SUDO}${SUDO:+ }apt install ${addedNativePackages[*]}")
}

preInstall()
{
    local item="${1:?}"; shift
    local action="${1:?}"; shift

    local actionWithoutSudo="${action#\$SUDO }"
    if [ -x "${preinstallActionsDirspec}/${actionWithoutSudo}" ]; then
	actionWithoutSudo="${preinstallActionsDirspec}/${actionWithoutSudo}"
	toBeInstalledCommands+=("${sudoPrefix:+${SUDO}${SUDO:+ }}${actionWithoutSudo}")
    elif [ -e "${preinstallActionsDirspec}/${action}" ]; then
	local quotedPreinstallNotification; printf -v quotedPreinstallNotification %s "${preinstallActionsDirspec}/${action}"
	toBeInstalledCommands+=("addLoginNotification --file $quotedPreinstallNotification --immediate --no-blocking-gui")
    else
	local name="${action#*:}"
	local prefix="${action%"$name"}"
	case "$prefix" in
	    # Note: Native packages would be indistinguishable from the
	    # PREINSTALL-EXPRESSION, as they have no prefix. Allow using a
	    # special "native:" prefix should it be necessary to install a
	    # package via the distribution's package manager before the main
	    # installation.
	    native:)
		addItems "${action#native:}"
		generateInstallCommands
		;;
	    ppa:|build-dep:|deb+url:|snap:|pip3:|npm:|wine+url:|custom:)
		addItems "$action"
		generateInstallCommands
		;;
	    *)
		toBeInstalledCommands+=("${sudoPrefix:+${SUDO}${SUDO:+ }}${actionWithoutSudo}")
		;;
	esac
    fi

    printInstallCommands || \
	printf >&2 'Skipping preinstall action, because %s indicated that no action is needed.\n' "$action"
}

postInstall()
{
    [ ${#addedPostinstallArgs[@]} -gt 0 ] || return

    local quotedPostInstallCommand
    printf -v quotedPostInstallCommand '%q ' "${scriptDir}/${scriptName}" "${recursiveArgs[@]}" "${addedPostinstallArgs[@]}"
    toBeInstalledCommands+=("${quotedPostInstallCommand% }")
}
runPostInstallCheck()
{
    local item="${1:?}"; shift
    local action="${1:?}"; shift
    local actionWithoutSudo="${action#\$SUDO }"
    if hasItem "$item"; then
	if [ -x "${postinstallActionsDirspec}/${action}" ]; then
	    "${postinstallActionsDirspec}/${action}"
	elif [ -x "${postinstallActionsDirspec}/${actionWithoutSudo}" ]; then
	    $SUDO "${postinstallActionsDirspec}/${actionWithoutSudo}"
	elif [ -e "${postinstallActionsDirspec}/${action}" ]; then
	    addLoginNotification --file "${postinstallActionsDirspec}/${action}" --immediate
	else
	    local name="${action#*:}"
	    local prefix="${action%"$name"}"
	    case "$prefix" in
		# Note: Native packages would be indistinguishable from the
		# POSTINSTALL-EXPRESSION, as they have no prefix. Allow using a
		# special "native:" prefix should it be necessary to install a
		# package via the distribution's package manager after a
		# successful installation.
		native:)
		    addItems "${action#native:}"
		    printInstallCommands || \
			printf >&2 'Skipping postinstall action, because %s indicated that no action is needed.\n' "$action"
		    ;;
		ppa:|build-dep:|deb+url:|snap:|pip3:|npm:|wine+url:|custom:)
		    addItems "$action"
		    generateInstallCommands
		    printInstallCommands || \
			printf >&2 'Skipping postinstall action, because %s indicated that no action is needed.\n' "$action"
		    ;;
		*)
		    eval "$action";;
	    esac
	fi || return 1
    else
	printf >&2 'Skipping postinstall action, because installation of %s was not successful.\n' "$item"
    fi
}

generateInstallCommands()
{
    typeset -a typeOrdering=("${!typeInstallOrder[@]}")
    readarray -t typeOrdering < <(printf '%s\n' "${typeOrdering[@]}" | sort -n)

    local order; for order in "${typeOrdering[@]}"
    do
	local typeFunction="${typeInstallOrder["$order"]}"
	eval "install${typeFunction}"
    done

    postInstall
}
printInstallCommands()
{
    [ ${#toBeInstalledCommands[@]} -eq 0 ] && return 1
    printf '%s\n' "${toBeInstalledCommands[@]}"
}


obtainSelection=askTo
typeset -a selections=()
prePostStatus=
isVerbose=
typeset -a recursiveArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--config-help|-H)
			shift
			typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
			eval 'printConfigUsage "$@"' "${pager:+|}" '"${pager[@]}"'
			exit 0
			;;
	--base-dir)	recursiveArgs+=("$1" "$2"); shift; baseDir="${1:?}"; shift;;
	--verbose|-v)	recursiveArgs+=("$1"); shift; isVerbose=t;;
	--yes|-y)	shift; obtainSelection=true;;
	--select|-s)	shift; selections+=("$1"); shift;;
	--all|-a)	shift
			addAllAcceptedGroups
			if [ ${#acceptedGroups[@]} -eq 0 ]; then
			    exit 1
			else
			    set -- "${acceptedGroups[@]}" "$@"
			fi
			;;
	--database)	shift; database "$@"; exit $?;;
	--pre)		shift; item="$1"; shift
			if [ "$1" != '--action' ]; then
			    printf >&2 'ASSERT: No --action following after --pre %q.\n' "$item"; exit 3
			fi
			shift; action="$1"; shift
			: ${prePostStatus:=0}
			preInstall "$item" "$action" || prePostStatus=1
			;;
	--post)		shift; item="$1"; shift
			if [ "$1" != '--action' ]; then
			    printf >&2 'ASSERT: No --action following after --post %q.\n' "$item"; exit 3
			fi
			shift; action="$1"; shift
			: ${prePostStatus:=0}
			runPostInstallCheck "$item" "$action" || prePostStatus=1
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ -n "$prePostStatus" ] && exit $prePostStatus
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

IFS=' '
customActionsDirspec="${baseDir}/custom"
preinstallActionsDirspec="${baseDir}/preinstall"
postinstallActionsDirspec="${baseDir}/postinstall"
definitionDirspec="${baseDir}/definitions"

typeset -a definitions=()
for definitionFile
do
    if [ -f "${definitionDirspec}/${definitionFile}" -a "${definitionFile:0:1}" != '.' ]; then
	definitionFilespec="${definitionDirspec}/${definitionFile}"
    elif [ -f "${definitionFile}" ]; then
	definitionFilespec="$definitionFile"
    else
	printf >&2 'ERROR: Definition "%s" does not exist.\n' "$definitionFile"
	exit 2
    fi

    while IFS=$'\n' read -r line
    do
	while [[ "$line" =~ \\$ ]]
	do
	    IFS=$'\n' read -r nextLine
	    line="${line%\\}$nextLine"
	done
	[[ "$line" =~ ^[[:space:]]*# ]] && continue
	[[ "$line" =~ ^[[:space:]]*$ ]] && continue


	if [ ${#selections[@]} -eq 0 ]; then
	    definitions+=("$line")
	else
	    items="${line%%[	 ]#*}"
	    comment="${line#"$items"}"
	    comment="${comment#[	 ]#}"
	    comment="${comment##[	 ]}"
	    subject="${comment:-"$items"}"

	    contains "$subject" "${selections[@]}" && \
		definitions+=("$line")
	fi

    done < "$definitionFilespec"
done
[ ${#definitions[@]} -eq 0 ] && exit 1



missingDefinitionCount=0
for definition in "${definitions[@]}"
do
    items="${definition%%[	 ]#*}"
    comment="${definition#"$items"}"
    comment="${comment#[	 ]#}"
    comment="${comment##[	 ]}"
    subject="${comment:-"$items"}"
    eval "set -- $items"
    itemVerb=are; [ -n "$comment" -o $# -eq 1 ] && itemVerb=is
    itemAuxVerb=

    typeset -a missingItems=()
    lastMissingItem=
    for item
    do
	case "$item" in
	    preinstall:*|postinstall:*)
		if [ -n "$lastMissingItem" ]; then
		    # The preinstall action will run when the previous item will
		    # be installed. The postinstall action will run when the
		    # installation of the previous item was successful. To be
		    # able to check that, we need that item as well, so append
		    # it on a new line.
		    missingItems+=("$item"$'\n'"$lastMissingItem")
		fi
		;;
	    *)	if hasItem "$item"; then
		    lastMissingItem=
		else
		    missingItems+=("$item")
		    lastMissingItem="$item"
		fi
		;;
	esac
    done

    if [ ${#missingItems[@]} -eq 0 ]; then
	[ "$isVerbose" ] && printf >&2 'Already installed: %s\n' "$definition"
    else
	let missingDefinitionCount+=1
	what=
	if [ $# -gt ${#missingItems[@]} ]; then
	    missingItemsPlural=s; [ ${#missingItems[@]} -eq 1 ] && missingItemsPlural=
	    what="${#missingItems[@]} item${missingItemsPlural} missing: ${missingItems[*]}"
	elif [ $# -gt 1 ]; then
	    what="all ${#missingItems[@]} items are missing"
	fi

	if [ ${#missingItems[@]} -eq 1 ] && [[ "${missingItems[0]}" =~ 'custom:false:' ]]; then
	    itemVerb='may or may'
	    itemAuxVerb=be
	fi

	if $obtainSelection --subject "$subject" --verb "$itemVerb not yet${itemAuxVerb:+ }$itemAuxVerb" --state "installed${what:+ (}${what}${what:+)}" --action 'install it'; then
	    addItems "${missingItems[@]}"
	fi
    fi
done



generateInstallCommands
printInstallCommands && exit

if [ "${#definitions[@]}" -gt 0 ]; then
    if [ $missingDefinitionCount -gt 0 ]; then
	missingDefinitionCountPlural=s; [ $missingDefinitionCount -eq 1 ] && missingDefinitionCountPlural=
	printf >&2 '%d not yet installed definition%s were declined.\n' "$missingDefinitionCount" "$missingDefinitionCountPlural"
    else
	definitionsVerb=are; definitionsPlural=s; [ ${#definitions[@]} -eq 1 ] && { definitionsVerb=is; definitionsPlural= ; }
	printf >&2 '%d definition%s %s already installed.\n' "${#definitions[@]}" "$definitionsPlural" "$definitionsVerb"
    fi
else
    echo >&2 'No definitions have been found.'
fi
exit 1
