#!/bin/bash

: ${SUDO:=sudoWithUnixhome}; [ $EUID -eq 0 ] && SUDO=''

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
readonly projectDir="$(dirname -- "$scriptDir")"
baseDir="${projectDir}/etc"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s | tee install-script.sh && sh install-script.sh\n' "$(basename "$1")" "[--check|--dry-run] [-q|--quiet|--silence-no-definitions|-v|--verbose] [-f|--force] [-y|--yes|[-q|--quiet]] [-b|--batch] [-s|--select DEFINITION [-s ...]] [--base-dir BASE-DIR] [--name NAME] [-q|--quiet]"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-P|--print-definitions|-p|--print|-e|--execute [...]'
    echo
    echo 'Update check (listing the definitions):'
    echo
    printf 'Usage: SUDO=exit98 %q %s\n' "$(basename "$1")" '--check --print-definitions --quiet'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    local IFS=$'\n'
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Guided wizard to interactively choose / take (with -y|--yes) updates from those
definitions and definition groups that are not yet installed but had been
persistently accepted beforehand. and [print commands to] install those selected
software items (from various sources).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    echo 'See setup-software for what the options mean.'
}

isCheckOrDryRun=
printer=(echo)
typeset -a additionalBaseDirs=()
setupName=
typeset -a setupSoftwareArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--check|--dry-run)
			setupSoftwareArgs+=("$1"); shift; isCheckOrDryRun=t;;
	--execute|-e)	# The done trigger needs to be directly executed if the
			# commands have been, too.
			setupSoftwareArgs+=("$1"); shift; printer=()
			;;
	--base-dir)	setupSoftwareArgs+=("$1" "$2"); shift; baseDir="${1:?}"; shift;;
	--add-base-dir)	setupSoftwareArgs+=("$1" "$2"); shift; additionalBaseDirs=("${1:?}" "${additionalBaseDirs[@]}"); shift;;
	--name)		shift; setupName="${1:?}"; shift;;
	--)		setupSoftwareArgs+=("$1"); shift; break;;
	*)		setupSoftwareArgs+=("$1"); shift;;
    esac
done
setup-software --group-recall-only --recall-only --all "${setupSoftwareArgs[@]}" "$@" || exit $?

createSetupName()
{
    setupName="$(basename -- "$(dirname -- "$(simplifyPath "${1:?}")")")"
    setupName="setup-${setupName#setup-}"
}

if [ ! "$isCheckOrDryRun" ]; then
    [ -n "$setupName" ] || createSetupName "${additionalBaseDirs[@]}" "$baseDir"
    updaterName="update-${setupName#setup-}"

    "${printer[@]}" $SUDO update-software-done "$updaterName"
fi
